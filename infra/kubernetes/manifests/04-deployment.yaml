apiVersion: v1
kind: Service
metadata:
  name: lucia
  namespace: lucia
  labels:
    app.kubernetes.io/name: lucia
    app.kubernetes.io/component: api
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: lucia
    app.kubernetes.io/component: api

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lucia
  namespace: lucia
  labels:
    app.kubernetes.io/name: lucia
    app.kubernetes.io/component: api
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: lucia
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: lucia
        app.kubernetes.io/component: api
      annotations:
        # These checksums help trigger pod restarts when configs change
        # In production, consider using Sealed Secrets or External Secrets Operator
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000

      serviceAccountName: lucia

      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - lucia
                topologyKey: kubernetes.io/hostname

      # Init container to wait for Redis
      initContainers:
        - name: wait-for-redis
          image: busybox:1.36
          command:
            - 'sh'
            - '-c'
            - |
              echo "Waiting for Redis to be ready..."
              for i in $(seq 1 60); do
                if nc -z lucia-redis 6379; then
                  echo "Redis is ready"
                  exit 0
                fi
                echo "Attempt $i: Redis not ready, retrying in 1 second..."
                sleep 1
              done
              echo "Redis failed to become ready"
              exit 1

      containers:
        - name: lucia
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
          image: docker.io/seiggy/lucia-agenthost:latest
          imagePullPolicy: IfNotPresent

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP

          # Environment variables from ConfigMap and Secrets
          envFrom:
            - configMapRef:
                name: lucia
            - secretRef:
                name: lucia

          # Additional environment variables
          env:
            - name: ASPNETCORE_ENVIRONMENT
              value: "Production"
            - name: ASPNETCORE_URLS
              value: "http://+:8080"
            - name: Logging__Console__IncludeScopes
              value: "true"
            - name: Logging__LogLevel__Default
              value: "Information"

          # Liveness probe - restart container if failed
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

          # Readiness probe - route traffic only to ready pods
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3

          # Resource limits and requests
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
            limits:
              cpu: 1000m
              memory: 512Mi

          # Volume mounts for temporary storage
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: cache
              mountPath: /app/.cache

      # Volumes for pod
      volumes:
        - name: tmp
          emptyDir:
            sizeLimit: 1Gi
        - name: cache
          emptyDir:
            sizeLimit: 500Mi

      # Termination grace period for graceful shutdown
      terminationGracePeriodSeconds: 30

      # DNS policy for pod
      dnsPolicy: ClusterFirst

      # Restart policy
      restartPolicy: Always
